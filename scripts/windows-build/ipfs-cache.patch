diff --git a/CMakeLists.txt b/CMakeLists.txt
index b24c23a..abad514 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -22,6 +22,8 @@ if("${CMAKE_SYSTEM_NAME}" STREQUAL "Linux")
     set(GOOS "linux")
 elseif("${CMAKE_SYSTEM_NAME}" STREQUAL "Android")
     set(GOOS "android")
+elseif("${CMAKE_SYSTEM_NAME}" STREQUAL "Windows")
+    set(GOOS "windows")
 else()
     message(FATAL_ERROR "unsupported system name ${CMAKE_SYSTEM_NAME}")
 endif()
@@ -29,6 +31,16 @@ endif()
 # Convert system processor into GOARCH (and maybe GOARM).
 if("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "x86_64")
     set(GOARCH "amd64")
+elseif("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "i386")
+    set(GOARCH "386")
+elseif("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "i486")
+    set(GOARCH "386")
+elseif("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "i586")
+    set(GOARCH "386")
+elseif("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "i686")
+    set(GOARCH "386")
+elseif("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "x86")
+    set(GOARCH "386")
 elseif("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "aarch64")
     set(GOARCH "arm64")
 elseif("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "armv7-a")
@@ -137,7 +149,7 @@ externalproject_add(ipfs
 set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14 -pthread -Wall -ggdb ${SANITIZE}")
 
 set(BINDINGS_HEADER  "${BINDING_DIR}/ipfs_bindings.h")
-set(BINDINGS_LIBRARY "${BINDING_DIR}/ipfs_bindings.so")
+set(BINDINGS_LIBRARY "${BINDING_DIR}/ipfs_bindings.a")
 set(BINDINGS_OUTPUT ${BINDINGS_HEADER} ${BINDINGS_LIBRARY})
 
 add_custom_command(
@@ -157,14 +169,14 @@ add_custom_command(
          && mkdir -p ${GOPATH}/src/github.com/equalitie/ipfs-cache
          && cd ${GOPATH}/src/github.com/equalitie/ipfs-cache
          && rsync -r ${CMAKE_CURRENT_SOURCE_DIR}/include ${CMAKE_CURRENT_SOURCE_DIR}/src .
-         && go build -ldflags '-extldflags -Wl,-soname,ipfs_bindings.so'
-                     --buildmode=c-shared
-                     -o ${BINDING_DIR}/ipfs_bindings.so
+         && go build #-ldflags '-extldflags -Wl,-soname,ipfs_bindings.so'
+                     --buildmode=c-archive
+                     -o ${BINDING_DIR}/ipfs_bindings.a
                      ./src/ipfs_bindings)
 
 
 add_custom_target(ipfs-bindings-target DEPENDS ${BINDINGS_OUTPUT})
-add_library(ipfs-bindings SHARED IMPORTED GLOBAL)
+add_library(ipfs-bindings STATIC IMPORTED GLOBAL)
 add_dependencies(ipfs-bindings ipfs-bindings-target)
 set_target_properties(ipfs-bindings PROPERTIES IMPORTED_LOCATION ${BINDINGS_LIBRARY})
 
@@ -179,9 +191,9 @@ file(GLOB sources
   "./src/*.h"
   "./src/*.cpp")
 
-add_library(ipfs-cache SHARED ${sources})
+add_library(ipfs-cache STATIC ${sources})
 set_target_properties(ipfs-cache PROPERTIES LINKER_LANGUAGE CXX)
-target_link_libraries(ipfs-cache ipfs-bindings)
+target_link_libraries(ipfs-cache ipfs-bindings ${Boost_LIBRARIES} ws2_32 winmm)
 add_dependencies(ipfs-cache json ipfs-bindings)
 
 ################################################################################
